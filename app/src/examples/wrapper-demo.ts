#!/usr/bin/env bun

/**
 * 4-Layer Wrapper Architecture Demo
 * 
 * Demonstrates: Your App ‚Üí QiAgent ‚Üí QiPrompt ‚Üí Vercel AI SDK ‚Üí LLM
 * 
 * This is the CORRECT way to use the wrappers for demos
 */

// Import from the simplified structure
import { createWorkflowOrchestra, createMathematicalWorkflow, executeWorkflow } from '../../../lib/src/qiagent/index.js'
import { QiPrompt } from '../../../lib/src/qiprompt/index.js'
import { z } from 'zod'

/**
 * DEMO 1: Simple QiPrompt Usage
 */
async function demonstrateQiPrompt() {
  console.log('1Ô∏è‚É£  QiPrompt Demo (Layer 3: Vercel AI SDK Wrapper)')
  console.log('================================================\n')

  const qiPrompt = new QiPrompt({
    defaultTemperature: 0.7,
    timeout: 15000
  })

  // Simple text generation
  console.log('üìù Simple text generation:')
  const result = await qiPrompt.generateText("Explain functional programming in one sentence.")
  console.log(`   Result: ${result}\n`)

  // Structured generation
  console.log('üîß Structured generation:')
  console.log('   Note: Structured generation available with real Zod schemas')  
  console.log('   Example: qiPrompt.generateStructured(prompt, { schema: z.object({...}) })\n')
}

/**
 * DEMO 2: QiAgent Workflow
 */
async function demonstrateQiAgent() {
  console.log('2Ô∏è‚É£  QiAgent Demo (Layer 4: Workflow Wrapper)')
  console.log('==========================================\n')

  // Create QiPrompt instance
  const qiPrompt = new QiPrompt({
    defaultTemperature: 0.8
  })

  // Create QiAgent using QiPrompt
  const agent = createAgent(qiPrompt)

  // Register a workflow
  const contentWorkflow = WorkflowPatterns.contentCreation('demo-workflow')
  agent.registerWorkflow(contentWorkflow)

  console.log('üìã Registered workflows:', agent.getWorkflows().join(', '))
  
  console.log('\nüöÄ Executing workflow...')
  const result = await agent.executeWorkflow(
    'demo-workflow',
    'Write a guide about clean code principles'
  )

  if (result.success) {
    console.log('\n‚úÖ Workflow completed successfully!')
    console.log(`‚è±Ô∏è  Execution time: ${result.executionTime}ms`)
    console.log(`üî¢ Steps: ${result.steps.length}`)
    
    console.log('\nüìä Step-by-step execution:')
    result.steps.forEach((step, index) => {
      console.log(`   ${index + 1}. ${step.agent} (${step.duration}ms)`)
      console.log(`      ‚Üí ${step.result.substring(0, 80)}...`)
    })

    console.log('\nüìù Final Result:')
    console.log('================')
    console.log(result.finalResult)
  } else {
    console.error('‚ùå Workflow failed:', result.error?.message)
  }
}

/**
 * DEMO 3: Custom Agent Roles
 */
async function demonstrateCustomAgents() {
  console.log('\n3Ô∏è‚É£  Custom Agent Roles Demo')
  console.log('===========================\n')

  const qiPrompt = new QiPrompt()
  const agent = createAgent(qiPrompt)

  // Create custom workflow with specialized agents
  const codeReviewWorkflow = {
    name: 'code-review',
    description: 'Comprehensive code review process',
    agents: {
      analyzer: {
        name: 'Code Analyzer',
        description: 'Analyzes code structure and patterns',
        systemPrompt: 'You are a code analysis expert. Examine code for structure, patterns, and architecture.'
      },
      security: {
        name: 'Security Auditor', 
        description: 'Reviews code for security vulnerabilities',
        systemPrompt: 'You are a security expert. Identify potential security issues, vulnerabilities, and best practices.'
      },
      performance: {
        name: 'Performance Reviewer',
        description: 'Evaluates code for performance optimization',
        systemPrompt: 'You are a performance optimization expert. Review code for efficiency and speed improvements.'
      }
    },
    steps: {
      analyze: {
        agent: 'analyzer',
        nextSteps: ['security']
      },
      security: {
        agent: 'security', 
        nextSteps: ['performance']
      },
      performance: {
        agent: 'performance',
        nextSteps: []
      }
    },
    startStep: 'analyze'
  }

  agent.registerWorkflow(codeReviewWorkflow)

  console.log('üîç Executing code review workflow...')
  const result = await agent.executeWorkflow(
    'code-review',
    `
    function processData(data) {
      let result = [];
      for (let i = 0; i < data.length; i++) {
        if (data[i].active) {
          result.push(data[i]);
        }
      }
      return result;
    }
    `
  )

  if (result.success) {
    console.log('\n‚úÖ Code review completed!')
    console.log(`üìä Reviewed by ${result.steps.length} specialized agents`)
    
    result.steps.forEach((step, index) => {
      console.log(`\n${index + 1}. ${step.agent}:`)
      console.log(`   ${step.result}`)
    })
  }
}

/**
 * DEMO 4: Architecture Benefits
 */
function demonstrateArchitectureBenefits() {
  console.log('\n4Ô∏è‚É£  Architecture Benefits')
  console.log('========================\n')

  console.log('üèóÔ∏è  4-Layer Wrapper Architecture:')
  console.log('')
  console.log('   Your App (Layer 1)')
  console.log('       ‚Üì')
  console.log('   QiAgent (Layer 2) ‚Üê Simple workflow management')
  console.log('       ‚Üì')
  console.log('   QiPrompt (Layer 3) ‚Üê LLM interaction wrapper')
  console.log('       ‚Üì')
  console.log('   Vercel AI SDK (Layer 4) ‚Üê Provider abstraction')
  console.log('       ‚Üì')
  console.log('   LLM Provider (Ollama, OpenAI, etc.)')
  console.log('')
  
  console.log('‚úÖ Benefits:')
  console.log('‚Ä¢ **Simplicity**: One-line workflow execution')
  console.log('‚Ä¢ **Flexibility**: Easy to switch providers or models')
  console.log('‚Ä¢ **Reliability**: Built-in retry and error handling')
  console.log('‚Ä¢ **Type Safety**: Full TypeScript support')
  console.log('‚Ä¢ **Production Ready**: Clean separation of concerns')
  console.log('')

  console.log('üîß Development Benefits:')
  console.log('‚Ä¢ Mock implementations for testing')
  console.log('‚Ä¢ Clear API boundaries')
  console.log('‚Ä¢ Easy to extend and customize')
  console.log('‚Ä¢ Minimal boilerplate code')
}

/**
 * Main demo runner
 */
async function main() {
  console.log('üé≠ 4-Layer Wrapper Architecture Demo')
  console.log('===================================\n')

  console.log('This demo showcases the proper wrapper usage:')
  console.log('Your App ‚Üí QiAgent ‚Üí QiPrompt ‚Üí Vercel AI SDK ‚Üí LLM\n')

  try {
    // Show architecture benefits first
    demonstrateArchitectureBenefits()

    // Note about mock implementations
    console.log('\n‚ö†Ô∏è  Note: These demos use mock implementations.')
    console.log('   For production, configure with real models:')
    console.log('')
    console.log('   ```typescript')
    console.log('   import { ollama } from "ai/ollama"')
    console.log('   const qiPrompt = new QiPrompt({')
    console.log('     defaultModel: ollama("llama3.2")')
    console.log('   })')
    console.log('   ```')
    console.log('')

    // Run demos
    await demonstrateQiPrompt()
    await demonstrateQiAgent()
    await demonstrateCustomAgents()

    console.log('\nüéâ All wrapper demos completed!')
    console.log('')
    console.log('üîë Key Takeaways:')
    console.log('‚Ä¢ QiPrompt simplifies LLM interactions')
    console.log('‚Ä¢ QiAgent handles workflow orchestration')
    console.log('‚Ä¢ 4-layer architecture provides flexibility')
    console.log('‚Ä¢ Easy to test with mock implementations')
    console.log('‚Ä¢ Production-ready with real model configuration')
    console.log('')
    console.log('üöÄ Ready to build sophisticated AI workflows!')

  } catch (error) {
    console.error('‚ùå Demo failed:', error)
  }
}

// Run the demo
main() 