# Language-Agnostic Template Verification
# Version: 1.0
# Purpose: Verify Stage 3 implementation template is complete and language-agnostic

process:
  name: "QiCore v4.0 Implementation Template Verification"
  overview: |
    Verify that the language-agnostic implementation template correctly
    translates design patterns into implementable structures.

prerequisites:
  required_inputs:
    - path: "design/qi.v4.design.analysis.md"
      description: "Design analysis from Stage 2"
    
    - path: "guides/mathematical-contracts.md"
      description: "Abstract mathematical contracts"
    
    - path: "impl/qi.v4.impl.template.md"
      description: "Implementation template to verify"

verification_criteria:
  component_completeness:
    expected_components: 13
    description: "Verify all required components are templated"
    target_file: "build/impl/qi.v4.impl.template.md"
    
    component_requirements:
      - "Must have exactly 13 numbered component sections"
      - "Each component must have Pattern Description from design analysis"
      - "Each component must have Language-Agnostic Template"
      - "Each component must have Mathematical Properties section"
      - "Each component must have Performance Constraints"
      - "Each component must have Adaptation Guidelines"
    
    verification_method: "content_analysis"
    verification_rules:
      - "Count numbered sections matching '### [number]. '"
      - "Verify each component references design analysis pattern"
      - "Ensure mathematical properties are preserved"
      - "Check performance constraints are tier-independent"
      - "Verify adaptation guidelines for language specificity"

  contract_implementation:
    - criterion: "All 8 contracts templated"
      contracts:
        - "Result<T>"
        - "QiError"
        - "Configuration"
        - "Logging"
        - "Cache"
        - "HTTP"
        - "Document"
        - "CLP"
      check: "verify each contract has template section"
      required: true
    
    - criterion: "Contract methods specified"
      check: "grep -i 'methods:' && grep -E 'map|flatMap|merge|get|set'"
      required: true
    
    - criterion: "Contract types defined"
      check: "grep -i 'types:' && grep -E 'Result|Error|Config|Logger'"
      required: true

  language_agnostic_design:
    - criterion: "No language-specific syntax"
      check: "! grep -E '\\{|\\}|;|->|=>|::|\\.|\\[|\\]' || echo 'Pseudo-code format used'"
      required: true
    
    - criterion: "Abstract type definitions"
      check: "grep -i 'type.*=' && ! grep -E 'class|interface|struct|trait'"
      required: true
    
    - criterion: "Generic operation descriptions"
      check: "grep -i 'operation:' && grep -i 'behavior:'"
      required: true
    
    - criterion: "No implementation details"
      check: "! grep -E 'import|require|include|using|#include'"
      required: true

  mathematical_consistency:
    - criterion: "Monad operations preserved"
      check: "grep -i 'map.*operation' && grep -i 'flatMap.*operation'"
      required: true
    
    - criterion: "Monoid properties for Configuration"
      check: "grep -i 'merge.*operation' && grep -i 'empty.*config'"
      required: true
    
    - criterion: "Functor mapping for components"
      check: "grep -i 'component.*map' && grep -i 'transform.*operation'"
      required: true
    
    - criterion: "Error handling consistency"
      check: "grep -i 'error.*handling' && grep -i 'result.*chain'"
      required: true

  architectural_structure:
    - criterion: "Component dependencies specified"
      check: "grep -i 'dependencies:' && grep -i 'requires:'"
      required: true
    
    - criterion: "Interface boundaries defined"
      check: "grep -i 'boundary:' && grep -i 'exports:'"
      required: true
    
    - criterion: "Data flow patterns specified"
      check: "grep -i 'data.*flow' && grep -i 'pipeline'"
      required: true
    
    - criterion: "State management patterns"
      check: "grep -i 'state.*management' && grep -i 'immutable'"
      required: true

  implementation_guidance:
    - criterion: "Implementation hints provided"
      check: "grep -i 'implementation.*hint' && grep -i 'language.*note'"
      required: true
    
    - criterion: "Common patterns identified"
      check: "grep -i 'common.*pattern' && grep -i 'typical.*approach'"
      required: true
    
    - criterion: "Performance considerations noted"
      check: "grep -i 'performance.*note' && grep -i 'optimization'"
      required: true
    
    - criterion: "Testing approach outlined"
      check: "grep -i 'testing.*approach' && grep -i 'property.*test'"
      required: true

  completeness_metrics:
    - criterion: "Each component has all required sections"
      sections: ["Purpose", "Structure", "Interface", "Operations", "Dependencies"]
      check: "verify each component has all 5 sections"
      required: true
    
    - criterion: "Cross-references to design analysis"
      check: "grep -i 'design.*analysis' && grep -i 'derived.*from'"
      required: true
    
    - criterion: "Traceability to formal specification"
      check: "grep -i 'formal.*contract' && grep -i 'mathematical.*property'"
      required: true

  consistency_checks:
    - criterion: "Consistent naming conventions"
      check: "verify consistent naming across all components"
      required: true
    
    - criterion: "Consistent operation signatures"
      check: "verify similar operations have consistent signatures"
      required: true
    
    - criterion: "Consistent error handling approach"
      check: "verify all components use Result<T> pattern"
      required: true
    
    - criterion: "Consistent configuration approach"
      check: "verify all components use Configuration monoid"
      required: true

validation_process:
  stages:
    - name: "Component Completeness Check"
      action: "Verify all 13 components present with required sections"
      failure_action: "Add missing components or sections"
      critical: true
    
    - name: "Contract Implementation Check"
      action: "Verify all 8 contracts have template implementations"
      failure_action: "Add missing contract templates"
    
    - name: "Language Agnostic Check"
      action: "Verify no language-specific syntax used"
      failure_action: "Remove language-specific elements"
    
    - name: "Mathematical Consistency Check"
      action: "Verify mathematical properties preserved"
      failure_action: "Add mathematical property preservation"
    
    - name: "Architectural Structure Check"
      action: "Verify component dependencies and boundaries"
      failure_action: "Define missing architectural elements"
    
    - name: "Implementation Guidance Check"
      action: "Verify sufficient guidance for language implementations"
      failure_action: "Add implementation hints and patterns"
    
    - name: "Completeness Check"
      action: "Verify all required sections and cross-references"
      failure_action: "Add missing sections and references"
    
    - name: "Consistency Check"
      action: "Verify consistent patterns across all components"
      failure_action: "Standardize inconsistent patterns"

output:
  report_path: "verification/template-verification-report.md"
  format: |
    # Implementation Template Verification Report
    Date: [timestamp]
    
    ## Summary
    - Pass/Fail: [status]
    - Components Found: [x/13]
    - Criteria Met: [x/y]
    
    ## Component Completeness
    - Components present: [x/13]
    - Structure definitions: [x/13]
    - Interface definitions: [x/13]
    
    ## Contract Implementation
    - Result<T>: [pass/fail]
    - QiError: [pass/fail]
    - Configuration: [pass/fail]
    - Logging: [pass/fail]
    - Cache: [pass/fail]
    - HTTP: [pass/fail]
    - Document: [pass/fail]
    - CLP: [pass/fail]
    
    ## Language Agnostic Design
    - No language syntax: [pass/fail]
    - Abstract types: [pass/fail]
    - Generic operations: [pass/fail]
    - No implementation details: [pass/fail]
    
    ## Mathematical Consistency
    - Monad operations: [pass/fail]
    - Monoid properties: [pass/fail]
    - Functor mapping: [pass/fail]
    - Error handling: [pass/fail]
    
    ## Architectural Structure
    - Dependencies specified: [pass/fail]
    - Interface boundaries: [pass/fail]
    - Data flow patterns: [pass/fail]
    - State management: [pass/fail]
    
    ## Implementation Guidance
    - Implementation hints: [pass/fail]
    - Common patterns: [pass/fail]
    - Performance notes: [pass/fail]
    - Testing approach: [pass/fail]
    
    ## Completeness Metrics
    - Required sections: [pass/fail]
    - Design analysis refs: [pass/fail]
    - Formal spec traceability: [pass/fail]
    
    ## Consistency Checks
    - Naming conventions: [pass/fail]
    - Operation signatures: [pass/fail]
    - Error handling approach: [pass/fail]
    - Configuration approach: [pass/fail]
    
    ## Required Actions
    [list of fixes needed]

execution:
  automated: true
  manual_review: true
  cache_key: "template_${file_hash}"