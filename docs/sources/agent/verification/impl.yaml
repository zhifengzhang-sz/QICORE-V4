# Implementation Verification
# Version: 1.0
# Purpose: Verify language implementations comply with formal specification

process:
  name: "QiCore v4.0 Implementation Verification"
  overview: |
    Verify that language-specific implementations correctly implement
    the formal specification and meet all quality requirements.

parameters:
  language:
    description: "Target language to verify"
    required: true
    values: ["ts", "hs", "py", "rs", "go"]

prerequisites:
  required_inputs:
    - path: "objective/formal/qi.v4.formal.spec.md"
      description: "Formal specification"
    
    - path: "design/qi.v4.design.analysis.md"
      description: "Design analysis"
    
    - path: "impl/qi.v4.${language}.template.md"
      description: "Language template to verify"
    
    - path: "impl/qi.v4.${language}.impl.md"
      description: "Implementation guide to verify"

verification_criteria:
  contract_implementation:
    - criterion: "All 8 contracts implemented"
      contracts:
        - name: "Result<T>"
          required_methods: ["map", "flatMap", "orElse", "unwrap", "unwrapOr", "match"]
        - name: "QiError"
          required_fields: ["code", "message", "category", "context", "cause", "timestamp"]
        - name: "Configuration"
          required_methods: ["merge", "get", "set", "validate", "fromFile", "fromEnvironment"]
        - name: "Logging"
          required_methods: ["debug", "info", "warn", "error", "fatal", "isLevelEnabled"]
        - name: "Cache"
          required_methods: ["get", "set", "delete", "clear", "size", "getOrSet"]
        - name: "HTTP"
          required_methods: ["get", "post", "put", "delete", "stream", "withCircuitBreaker"]
        - name: "Document"
          required_methods: ["generate", "generateStream", "generateBatch", "validate"]
        - name: "CLP"
          required_methods: ["parse", "validate", "generateHelp", "generateUsage"]
      check: "verify each contract has all required methods"
      required: true
  
  code_quality:
    - criterion: "Concrete, runnable examples"
      check: |
        grep -E '```(ts|typescript|py|python|hs|haskell|rs|rust|go)' &&
        grep -i 'example' &&
        ! grep -i 'interface.*{.*}.*// TODO'
      required: true
    
    - criterion: "Error handling demonstrated"
      check: |
        grep -i 'error.*handling' &&
        grep -E 'try|catch|Result\.|Either|Maybe|Option|error'
      required: true
    
    - criterion: "No placeholder implementations"
      check: "! grep -E 'TODO|FIXME|throw.*not.*implemented|NotImplemented'"
      required: true
    
    - criterion: "Async operations handled"
      check: "grep -E 'async|await|Promise|Future|IO' || echo 'N/A for sync language'"
      required: false
  
  mathematical_compliance:
    - criterion: "Monad laws preserved"
      check: "grep -i 'monad.*law' || grep -E 'left.*identity|right.*identity|associativity'"
      required: true
    
    - criterion: "Monoid laws for Configuration"
      check: "grep -i 'monoid' && grep -i 'identity' && grep -i 'associativ'"
      required: true
    
    - criterion: "Functor laws for components"
      check: "grep -i 'functor' || grep -i 'map.*composition'"
      required: true
  
  performance_validation:
    typescript:
      tier: "interpreted"
      target: "< 100 microseconds"
    python:
      tier: "interpreted"
      target: "< 100 microseconds"
    haskell:
      tier: "functional"
      target: "< 50 microseconds"
    rust:
      tier: "native"
      target: "< 1 microsecond"
    go:
      tier: "vm-based"
      target: "< 10 microseconds"
    
    checks:
      - criterion: "Performance benchmarks included"
        check: "grep -i 'benchmark' || grep -i 'performance.*test'"
        required: true
      
      - criterion: "Measurements match language tier"
        check: "verify performance targets match ${language} tier"
        required: true
  
  resilience_patterns:
    - criterion: "Error recovery implemented"
      check: "grep -i 'recover' || grep -i 'fallback' || grep -i 'orElse'"
      required: true
    
    - criterion: "Circuit breaker for HTTP"
      check: "grep -i 'circuit.*breaker' && grep -i 'threshold'"
      required: true
    
    - criterion: "Retry logic included"
      check: "grep -i 'retry' && grep -E 'backoff|exponential|delay'"
      required: true
    
    - criterion: "Streaming support"
      check: "grep -i 'stream' && (grep -i 'chunk' || grep -i 'iterator' || grep -i 'generator')"
      required: true
  
  testing_strategy:
    - criterion: "Property-based tests defined"
      check: "grep -E 'property|QuickCheck|fast-check|hypothesis|proptest|gopter'"
      required: true
    
    - criterion: "95% compliance measurable"
      check: "grep -E '95%|coverage|compliance.*metric'"
      required: true
    
    - criterion: "Test structure matches src"
      check: "grep -E 'test/.*base|test/.*core|test/.*http' || grep -E 'tests/.*base'"
      required: true
    
    - criterion: "Integration tests included"
      check: "grep -i 'integration' && grep -i 'component.*interaction'"
      required: true
  
  component_structure:
    - criterion: "Base component independent"
      check: "verify base/ has no imports from core/ or other components"
      required: true
    
    - criterion: "Component boundaries enforced"
      check: "grep -E 'export|pub|module' && grep -i 'interface'"
      required: true
    
    - criterion: "Dependency injection pattern"
      check: "grep -i 'inject' || grep -i 'provide' || grep -i 'factory'"
      required: true
  
  stage_input_compliance:
    description: "Verify Stage 5 inputs fulfill Stage 2 design analysis requirements"
    source_file: "design/qi.v4.design.analysis.md"
    
    component_completeness:
      expected_components: 13
      design_sections:
        - section: "2.1"
          component: "Result<T>"
          operations: ["success", "failure", "fromTryCatch", "map", "flatMap", "unwrap", "unwrapOr", "match"]
        - section: "2.2"
          component: "QiError"
          operations: ["create", "chain", "withContext", "toString"]
        - section: "3.1"
          component: "Configuration"
          operations: ["fromFile", "fromEnvironment", "merge", "get", "set", "validate"]
        - section: "3.2"
          component: "Logging"
          operations: ["debug", "info", "warn", "error", "fatal", "isLevelEnabled"]
        - section: "3.3"
          component: "Cache"
          operations: ["get", "set", "delete", "clear", "size", "getOrSet"]
        - section: "4.1"
          component: "HTTP Client"
          operations: ["get", "post", "put", "delete", "stream", "withCircuitBreaker"]
        - section: "4.2"
          component: "Document Generation"
          operations: ["generate", "generateStream", "generateBatch", "validate"]
        - section: "4.3"
          component: "Command-Line Processing"
          operations: ["parse", "validate", "generateHelp"]
          critical: true
          description: "Often missing from language implementations"
        - section: "4.4"
          component: "Web Framework"
          operations: ["route", "middleware", "handle", "listen"]
        - section: "4.5"
          component: "ASGI Server"
          operations: ["start", "stop", "gracefulShutdown", "reload"]
        - section: "4.6"
          component: "AI/LLM Client"
          operations: ["query", "stream", "embed", "configure"]
        - section: "4.7"
          component: "MCP Protocol"
          operations: ["connect", "call", "stream", "disconnect"]
        - section: "4.8"
          component: "Database"
          operations: ["query", "transaction", "migrate", "close"]
    
    interface_compliance:
      - criterion: "All 13 components present in language prompt"
        check: |
          # Check each component mentioned in prompt file (language-appropriate variants)
          for component in "Result" "QiError" "Configuration" "Logging" "Cache" "HTTP" "Document" "Command-Line" "Web Framework" "AI/LLM" "MCP" "Database"; do
            grep -q "$component" guides/impl.${language}.prompt.md || echo "Missing: $component"
          done
          
          # Check language-specific server component
          case "${language}" in
            py) grep -q "ASGI" guides/impl.${language}.prompt.md || echo "Missing: ASGI (Python-specific)" ;;
            ts) grep -q "Server.*Node\|Node.*Server" guides/impl.${language}.prompt.md || echo "Missing: Node.js Server (TypeScript-specific)" ;;
            hs) grep -q "WAI\|Warp\|Server" guides/impl.${language}.prompt.md || echo "Missing: WAI/Warp Server (Haskell-specific)" ;;
          esac
        required: true
        critical: true
      
      - criterion: "Each component has required operations from design analysis"
        check: |
          # Verify specific operations for critical components
          grep -q "parse.*args.*config" guides/impl.${language}.prompt.md || echo "Missing CLP parse operation"
          grep -q "validate.*args" guides/impl.${language}.prompt.md || echo "Missing CLP validate operation"
          grep -q "generateHelp" guides/impl.${language}.prompt.md || echo "Missing CLP generateHelp operation"
          
          grep -q "map.*flatMap" guides/impl.${language}.prompt.md || echo "Missing Result monad operations"
          grep -q "merge.*operation" guides/impl.${language}.prompt.md || echo "Missing Configuration merge operation"
        required: true
        critical: true
      
      - criterion: "Performance targets match language tier from design analysis"
        language_tiers:
          py: "100× baseline (Interpreted tier from design/qi.v4.design.analysis.md section 6.4)"
          ts: "100× baseline (Interpreted tier from design/qi.v4.design.analysis.md section 6.4)"
          hs: "50× baseline (Functional tier from design/qi.v4.design.analysis.md section 6.3)"
        check: "grep -E 'tier.*100|100.*baseline' guides/impl.${language}.prompt.md"
        required: true
      
      - criterion: "Mathematical properties preserved from design analysis"
        check: |
          grep -q "monad.*law\|associativity" guides/impl.${language}.prompt.md || echo "Missing monad laws"
          grep -q "functor.*law\|composition" guides/impl.${language}.prompt.md || echo "Missing functor laws"
          grep -q "monoid.*law\|identity.*element" guides/impl.${language}.prompt.md || echo "Missing monoid laws"
        required: true

validation_process:
  stages:
    - name: "Contract Implementation Check"
      action: "Verify all 8 contracts with required methods"
      failure_action: "List missing contracts/methods"
    
    - name: "Code Quality Check"
      action: "Verify concrete examples and error handling"
      failure_action: "Identify placeholder or incomplete code"
    
    - name: "Mathematical Compliance Check"
      action: "Verify monad/monoid/functor laws preserved"
      failure_action: "Add law verification examples"
    
    - name: "Performance Validation"
      action: "Verify benchmarks match language tier"
      failure_action: "Adjust performance targets"
    
    - name: "Resilience Check"
      action: "Verify error recovery, circuit breakers, streaming"
      failure_action: "Add missing resilience patterns"
    
    - name: "Testing Strategy Check"
      action: "Verify property-based testing approach"
      failure_action: "Define property tests"
    
    - name: "Component Structure Check"
      action: "Verify component boundaries and dependencies"
      failure_action: "Fix component violations"
    
    - name: "Component Count Consistency Check"
      action: "Verify consistent component count across all Stage 5 input files"
      failure_action: "Update files to have consistent component/contract counts"
      critical_note: "Prevents incomplete Stage 5 implementations"

output:
  report_path: "verification/impl-${language}-verification-report.md"
  format: |
    # Implementation Verification Report: ${language}
    Date: [timestamp]
    
    ## Summary
    - Language: ${language}
    - Tier: ${tier}
    - Pass/Fail: [status]
    - Criteria Met: [x/y]
    
    ## Contract Implementation
    - Result<T>: [pass/fail] - [missing methods]
    - QiError: [pass/fail] - [missing fields]
    - Configuration: [pass/fail] - [missing methods]
    - Logging: [pass/fail] - [missing methods]
    - Cache: [pass/fail] - [missing methods]
    - HTTP: [pass/fail] - [missing methods]
    - Document: [pass/fail] - [missing methods]
    - CLP: [pass/fail] - [missing methods]
    
    ## Code Quality
    - Concrete examples: [pass/fail]
    - Error handling: [pass/fail]
    - No placeholders: [pass/fail]
    - Async handling: [pass/fail/N/A]
    
    ## Mathematical Compliance
    - Monad laws: [pass/fail]
    - Monoid laws: [pass/fail]
    - Functor laws: [pass/fail]
    
    ## Performance
    - Target: ${performance_target}
    - Benchmarks included: [pass/fail]
    - Tier compliance: [pass/fail]
    
    ## Resilience Patterns
    - Error recovery: [pass/fail]
    - Circuit breaker: [pass/fail]
    - Retry logic: [pass/fail]
    - Streaming: [pass/fail]
    
    ## Testing Strategy
    - Property tests: [pass/fail]
    - 95% compliance: [pass/fail]
    - Test structure: [pass/fail]
    - Integration tests: [pass/fail]
    
    ## Component Structure
    - Base independence: [pass/fail]
    - Boundaries enforced: [pass/fail]
    - Dependency injection: [pass/fail]
    
    ## Component Count Consistency
    - Template components: [count] (expected: 13)
    - Package components: [count] (expected: 13)
    - Prompt contracts: [count] (expected: 13)
    - Cross-file consistency: [pass/fail]
    
    ## Required Actions
    [list of fixes needed]

execution:
  automated: true
  compile_check: true
  run_examples: true
  cache_key: "impl_${language}_${file_hash}"