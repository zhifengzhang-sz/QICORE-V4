name: "Stage 5: Design to TypeScript Implementation"
description: "Transform design patterns into concrete TypeScript implementations using researched packages"
version: "v4.0.1"
stage: 5
language: "TypeScript"

# ============================================================================
# STAGE 5 TRANSFORMATION OBJECTIVE
# ============================================================================

objective: |
  Transform language-agnostic design patterns into concrete TypeScript implementations by:
  
  1. **Type-Safe Implementation**: Leverage TypeScript's type system fully
  2. **Functional Pattern Integration**: Use fp-ts and effect-ts effectively
  3. **Mathematical Law Preservation**: Ensure compile-time correctness
  4. **Performance Optimization**: Apply TypeScript-specific optimizations
  5. **Package Integration**: Wrap selected packages with type-safe interfaces

# ============================================================================
# INPUT SPECIFICATIONS
# ============================================================================

inputs:
  required_files:
    - path: "build/impl/qi.v4.impl.template.md"
      description: "Language-agnostic implementation template from Stage 3"
    
    - path: "build/package/ts.md"  # FIXED: was build/research/qi.v4.ts.packages.md
      description: "TypeScript package research results from Stage 4"
    
    - path: "build/guides/mathematical-contracts.md"
      description: "Mathematical contracts from Stage 1"
    
    - path: "sources/guides/common.md"
      description: "Mathematical foundations and categorical structures"
    
    - path: "sources/guides/impl.ts.prompt.md"
      description: "Stage 5 TypeScript-specific transformation instructions"

# ============================================================================
# OUTPUT SPECIFICATIONS
# ============================================================================

outputs:
  target_files:
    - path: "build/impl/qi.v4.ts.template.md"
      description: "TypeScript code templates with runnable examples"
      required_sections:
        - "Base Component Types (Result<T>, QiError)"
        - "Core Component Implementation"
        - "Application Component Implementation"
        - "Type Definitions and Interfaces"
        - "fp-ts Integration Examples"
        - "Effect System Usage"
        
    - path: "build/impl/qi.v4.ts.impl.md"
      description: "TypeScript implementation guide and assembly instructions"
      required_sections:
        - "Project Setup and Dependencies"
        - "Type System Architecture"
        - "Package Integration Strategy"
        - "Build Configuration"
        - "Testing with fast-check"
        - "Performance Optimization"
        - "Deployment Guide"

  project_structure:
    base_path: "src/"
    components:
      - "base/ (Result<T>, QiError types)"
      - "core/ (Configuration, Logger, Cache)"
      - "http/ (HTTP client with circuit breaker)"
      - "document/ (Document generation with streaming)"
      - "clp/ (Command-line processing)"

# ============================================================================
# TRANSFORMATION PROCESS
# ============================================================================

transformation_process:
  
  step_1_type_architecture:
    description: "Design TypeScript type architecture"
    actions:
      - "Map Result monad to fp-ts Either/Option"
      - "Create discriminated unions for errors"
      - "Design generic type constraints"
      - "Implement phantom types where beneficial"
      - "Create branded types for validation"
  
  step_2_functional_integration:
    description: "Integrate functional programming patterns"
    actions:
      - "Use fp-ts for monadic operations"
      - "Apply io-ts for runtime validation"
      - "Implement effect-ts for side effects"
      - "Create pipeable APIs"
      - "Use function composition throughout"
  
  step_3_type_safety:
    description: "Maximize compile-time safety"
    actions:
      - "No use of 'any' type"
      - "Exhaustive pattern matching"
      - "Const assertions for literals"
      - "Type predicates for narrowing"
      - "Conditional types where appropriate"
  
  step_4_performance:
    description: "Optimize for JavaScript engines"
    actions:
      - "Minimize allocations in hot paths"
      - "Use object pools for frequent operations"
      - "Implement efficient serialization"
      - "Apply tree-shaking friendly exports"
      - "Bundle optimization strategies"

# ============================================================================
# QUALITY ASSURANCE
# ============================================================================

quality_assurance:
  
  type_correctness:
    - "All operations fully typed"
    - "No implicit any usage"
    - "Discriminated unions exhaustive"
    - "Generic constraints appropriate"
  
  functional_patterns:
    - "Monadic laws preserved"
    - "Referential transparency maintained"
    - "Side effects properly managed"
    - "Composition laws satisfied"
  
  build_quality:
    - "Zero TypeScript errors"
    - "Strict mode enabled"
    - "All flags configured properly"
    - "Bundle size optimized"

# ============================================================================
# SUCCESS CRITERIA
# ============================================================================

success_criteria:
  
  implementation_coverage:
    - "[ ] All 99 operations type-safe"
    - "[ ] All components have interfaces"
    - "[ ] All errors discriminated unions"
    - "[ ] All async operations Promise-based"
  
  type_system_usage:
    - "[ ] Generics used appropriately"
    - "[ ] Conditional types where beneficial"
    - "[ ] Mapped types for transformations"
    - "[ ] Template literal types for DSLs"
  
  package_integration:
    - "[ ] fp-ts integrated throughout"
    - "[ ] All packages properly typed"
    - "[ ] No @ts-ignore usage"
    - "[ ] Type definitions exported"

# ============================================================================
# VALIDATION METHOD
# ============================================================================

validation:
  method: "Generate verification report using success criteria from sources/guides/impl.prompt.md"
  
  verification_report:
    target_file: "stage5-typescript-verification-report.md"
    required_sections:
      - "Operation Implementation Verification"
      - "Type Safety Verification"
      - "Mathematical Property Preservation"
      - "Package Integration Verification"
      - "Performance Optimization Verification"
      - "Success Criteria Compliance"
    
    format: |
      # Stage 5 TypeScript Verification Report
      
      ## Operation Implementation Verification
      [Check every operation from design analysis has TypeScript implementation]
      
      ## Type Safety Verification
      [Verify all code is type-safe with no any usage]
      
      ## Mathematical Property Preservation
      [Validate categorical laws preserved in TypeScript]
      
      ## Package Integration Verification
      [Confirm all packages integrated with proper types]
      
      ## Performance Optimization Verification
      [Check optimizations applied appropriately]
      
      ## Success Criteria Compliance
      [Complete checklist from impl.ts.prompt.md]