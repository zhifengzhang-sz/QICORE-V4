name: "Stage 5: Templates + Packages to Haskell Implementation"
version: "v4.0.1"
description: "Transform language-agnostic templates and package research into Haskell implementation"
domain: "implementation_transformation"
category: "stage_5_workflow"

# ============================================================================
# STAGE 5 TRANSFORMATION OBJECTIVE
# ============================================================================

objective: |
  Transform language-agnostic templates into Haskell-specific implementation by:
  
  1. **Code Template Generation**: Create qi.v4.hs.template.md with Haskell code
  2. **Implementation Guide Generation**: Create qi.v4.hs.impl.md with assembly instructions
  3. **Package Integration**: Show how selected packages fulfill mathematical contracts
  4. **Mathematical Purity**: Leverage Haskell's type system for mathematical correctness
  5. **Lazy Evaluation**: Optimize using Haskell's evaluation strategy

# ============================================================================
# INPUT SPECIFICATIONS
# ============================================================================

inputs:
  required:
    stage_inputs:
      - path: "build/impl/qi.v4.impl.template.md"
        role: "Language-agnostic implementation template"
        description: "Stage 3 output: base templates for all languages"
        
      - path: "build/package/hs.md"
        role: "Haskell package selection"
        description: "Stage 4 output: researched and selected Haskell packages"
        
      - path: "build/guides/mathematical-contracts.md"
        role: "Mathematical contracts"
        description: "Stage 1 output: abstract mathematical interface contracts"
    
    methodology_files:
      - path: "sources/guides/impl.hs.prompt.md"
        role: "Haskell implementation methodology"
        description: "Haskell-specific transformation rules and patterns"
      
      - path: "sources/guides/common.md"
        role: "Shared foundations"
        description: "Mathematical foundations and categorical structures"

# ============================================================================
# OUTPUT SPECIFICATIONS
# ============================================================================

outputs:
  primary:
    - path: "build/impl/qi.v4.hs.template.md"
      description: "Haskell-specific code templates"
      format: "markdown"
      required_sections:
        - "Haskell Implementation Templates"
        - "Base Type Classes and Data Types"
        - "Core Components with Monadic Interfaces"
        - "Application Components with Effect Systems"
        - "Type-Level Programming Examples"
        - "Lens Integration for State Management"
        
    - path: "build/impl/qi.v4.hs.impl.md"
      description: "Haskell implementation guide/driver"
      format: "markdown"
      required_sections:
        - "Implementation Guide Overview"
        - "Cabal/Stack Project Setup"
        - "Module Structure and Exports"
        - "Type Class Hierarchy"
        - "QuickCheck Property Tests"
        - "Performance Profiling Guide"
        - "GHC Optimization Flags"

# ============================================================================
# SUCCESS CRITERIA
# ============================================================================

success_criteria:
  mathematical_correctness:
    - "All mathematical laws enforced at type level"
    - "Proper use of type classes for abstractions"
    - "Referential transparency maintained"
    - "Effect tracking with appropriate monads"
    
  haskell_idioms:
    - "Proper use of laziness for performance"
    - "Lens library for nested data access"
    - "STM for concurrent state management"
    - "Type families where appropriate"