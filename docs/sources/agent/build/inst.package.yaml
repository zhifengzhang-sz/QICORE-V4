name: "Stage 4: Package Research and Implementation Guide Generation"
version: "v4.0.2"
description: "Research packages AND generate language-specific implementation guides"
domain: "package_research_and_guide_generation"
category: "stage_4_workflow"

# ============================================================================
# STAGE 4 DUAL OBJECTIVE
# ============================================================================

objective: |
  Stage 4 has TWO critical outputs:
  
  1. **Package Research**: Select high-quality packages that satisfy mathematical contracts
  2. **Implementation Guide Generation**: Create impl.[lang].prompt.md for each language
  
  This implements the MAX-MIN principle:
  - MAXIMIZE use of high-quality existing packages
  - MINIMIZE custom implementation code
  
  CRITICAL: Use web search to ensure current package information (2024-2025)

# ============================================================================
# INPUT SPECIFICATIONS
# ============================================================================

inputs:
  required:
    stage_inputs:
      - path: "build/impl/qi.v4.impl.template.md"
        role: "Language-agnostic templates with contract dependencies"
        description: "Stage 3 output showing which contracts need fulfillment"
      
      - path: "build/guides/mathematical-contracts.md"
        role: "Mathematical contracts that packages must satisfy"
        description: "Stage 1 output defining abstract contracts"
    
    methodology_files:
      - path: "sources/guides/package-research-methodology.md"
        role: "Package research methodology"
        description: "How to research and evaluate packages"
      
      - path: "sources/guides/common.md"
        role: "Shared foundations"
        description: "Mathematical patterns and cross-language mappings"
    
    target_languages:
      - "python"
      - "typescript"
      - "haskell"

# ============================================================================
# OUTPUT SPECIFICATIONS
# ============================================================================

outputs:
  # OUTPUT 1: Package Research
  package_research:
    - path: "build/package/py.md"
      description: "Python package selections with justification"
      
    - path: "build/package/ts.md"
      description: "TypeScript package selections with justification"
      
    - path: "build/package/hs.md"
      description: "Haskell package selections with justification"
  
  # OUTPUT 2: Implementation Guides (NEW!)
  implementation_guides:
    - path: "build/guides/impl.py.prompt.md"
      description: "Python implementation guide using selected packages"
      
    - path: "build/guides/impl.ts.prompt.md"
      description: "TypeScript implementation guide using selected packages"
      
    - path: "build/guides/impl.hs.prompt.md"
      description: "Haskell implementation guide using selected packages"

# ============================================================================
# RESEARCH PROCESS WITH WEB SEARCH
# ============================================================================

research_process:
  
  step_1_contract_analysis:
    description: "Analyze what packages are needed"
    actions:
      - "Load mathematical contracts from Stage 1"
      - "Load implementation templates from Stage 3"
      - "Identify package requirements for each contract"
      - "Create search criteria for each component"
  
  step_2_web_search_current_packages:
    description: "CRITICAL: Search for current (2024-2025) packages"
    web_searches:
      python:
        - "best Python Result Either monad library 2024"
        - "Python configuration management libraries 2025 benchmarks"
        - "Python structured logging performance comparison 2024"
        - "Python async HTTP client circuit breaker 2025"
        - "Python LRU cache implementation benchmarks"
        
      typescript:
        - "TypeScript fp-ts alternatives 2024 performance"
        - "fastest TypeScript HTTP client library 2025"
        - "TypeScript configuration validation libraries 2024"
        - "TypeScript structured logging best practices 2025"
        
      haskell:
        - "Haskell production web frameworks 2024"
        - "Haskell streaming libraries performance 2025"
        - "Haskell configuration management 2024"
    
    critical: "Must use web search - AI knowledge is often outdated!"
  
  step_3_evaluate_packages:
    description: "Evaluate packages against contracts"
    criteria:
      - "Mathematical contract satisfaction"
      - "Performance benchmarks (current)"
      - "Community activity (recent commits)"
      - "Documentation quality"
      - "Type safety"
      - "Integration complexity"
  
  step_4_generate_implementation_guide:
    description: "Create impl.[lang].prompt.md"
    actions:
      - "Map selected packages to contracts"
      - "Define wrapper strategies"
      - "Create integration patterns"
      - "Document performance considerations"
      - "Include verification strategies"

# ============================================================================
# IMPLEMENTATION GUIDE TEMPLATE
# ============================================================================

implementation_guide_template: |
  # Stage 5: [Language] Implementation Using Researched Packages
  
  ## Package Integration Map
  
  Based on Stage 4 research, integrate these packages to fulfill contracts:
  
  | Contract | Selected Package | Version | Integration Strategy |
  |----------|-----------------|---------|---------------------|
  | Result Monad | [package] | [version] | [wrapper details] |
  | Configuration Monoid | [package] | [version] | [merge strategy] |
  | ... | ... | ... | ... |
  
  ## Transformation Process
  
  ### Step 1: Package Wrapper Design
  For each mathematical contract, create a wrapper around the selected package:
  
  ```[language]
  // Example for Result contract
  import { [PackageResult] } from '[package]';
  
  export class Result<T> {
    private constructor(private inner: [PackageResult]<T>) {}
    
    // Implement contract methods using package
    map<U>(fn: (value: T) => U): Result<U> {
      return new Result(this.inner.map(fn));
    }
    
    // Verify monad laws are preserved
    flatMap<U>(fn: (value: T) => Result<U>): Result<U> {
      return new Result(this.inner.chain(x => fn(x).inner));
    }
  }
  ```
  
  ### Step 2: Contract Verification
  
  Ensure wrapped packages satisfy mathematical contracts:
  
  ```[language]
  // Property-based tests for monad laws
  property("left identity", (a: any, f: (x: any) => Result<any>) => {
    return Result.success(a).flatMap(f).equals(f(a));
  });
  ```
  
  ### Step 3: Performance Optimization
  
  Language-specific optimizations while preserving contracts:
  - [Specific optimization strategies]
  - [Memory management approaches]
  - [Concurrency patterns]
  
  ## Integration Patterns
  
  [Detailed patterns for integrating all selected packages]
  
  ## Common Pitfalls
  
  1. **Package API Changes**: Lock versions to ensure stability
  2. **Contract Violations**: Always verify mathematical laws
  3. **Performance Degradation**: Benchmark wrapper overhead
  
  ## Success Criteria
  
  - [ ] All mathematical contracts satisfied
  - [ ] Performance within language tier bounds
  - [ ] Type safety maximized
  - [ ] Minimal custom code (MAX-MIN principle)

# ============================================================================
# QUALITY ASSURANCE
# ============================================================================

quality_assurance:
  
  package_selection:
    - "Current versions (2024-2025) verified"
    - "Benchmarks from recent comparisons"
    - "Active maintenance confirmed"
    - "Mathematical contract compatibility verified"
  
  implementation_guide:
    - "All selected packages integrated"
    - "Contract preservation strategies defined"
    - "Performance optimization included"
    - "Verification approach documented"

# ============================================================================
# SUCCESS CRITERIA
# ============================================================================

success_criteria:
  
  package_research_completeness:
    - "[ ] All contracts have package selections"
    - "[ ] Current (2024-2025) information used"
    - "[ ] Performance benchmarks included"
    - "[ ] Integration complexity assessed"
  
  implementation_guide_quality:
    - "[ ] Clear package-to-contract mapping"
    - "[ ] Wrapper patterns provided"
    - "[ ] Verification strategies included"
    - "[ ] Language-specific optimizations documented"
  
  max_min_principle:
    - "[ ] Maximum use of existing packages"
    - "[ ] Minimum custom implementation"
    - "[ ] Clear justification for any custom code"

# ============================================================================
# EXECUTION INSTRUCTIONS
# ============================================================================

execution:
  
  for_each_language:
    - "Research current packages via web search"
    - "Evaluate against mathematical contracts"
    - "Select best packages with justification"
    - "Generate build/package/[lang].md"
    - "Create sources/guides/impl.[lang].prompt.md"
    - "Verify MAX-MIN principle satisfied"
  
  critical_reminders:
    - "ALWAYS use web search for current info"
    - "ALWAYS verify contract satisfaction"
    - "ALWAYS generate BOTH outputs"
    - "ALWAYS document integration complexity"