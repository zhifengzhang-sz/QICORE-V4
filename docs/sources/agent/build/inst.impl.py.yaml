name: "Stage 5: Design to Python Implementation"
version: "v4.0.1"
description: "Transform design patterns into concrete Python implementations using researched packages"
domain: "implementation_transformation"
category: "stage_5_workflow"

# ============================================================================
# STAGE 5 TRANSFORMATION OBJECTIVE
# ============================================================================

objective: |
  Transform language-agnostic design patterns into concrete Python implementations by:
  
  1. **Pattern Implementation**: Map design patterns to Python idioms and packages
  2. **Mathematical Law Preservation**: Ensure categorical laws are preserved in Python
  3. **Performance Optimization**: Apply Python-specific optimizations within tier constraints
  4. **Type Safety**: Leverage Python type hints and runtime checks effectively
  5. **Package Integration**: Integrate researched packages while maintaining abstractions

# ============================================================================
# INPUT SPECIFICATIONS
# ============================================================================

inputs:
  required:
    stage_inputs:
      - path: "build/impl/qi.v4.impl.template.md"
        role: "Language-agnostic implementation template"
        description: "Stage 3 output: language-agnostic templates"
        operations_count: 99
      
      - path: "build/research/qi.v4.py.packages.md"
        role: "Python package research"
        description: "Stage 4 output: vetted Python packages"
      
      - path: "build/research/qi.v4.py.wrappers.md"
        role: "Python wrapper specifications"
        description: "Stage 4 output: interface wrappers for external packages"
      
      - path: "build/guides/mathematical-contracts.md"
        role: "Mathematical contracts"
        description: "Stage 2 output: abstract mathematical contracts"
    
    methodology_files:
      - path: "sources/guides/impl.py.prompt.md"
        role: "Stage 5 Python methodology"
        description: "Python-specific implementation methodology"
      
      - path: "sources/guides/common.md"
        role: "Shared foundations"
        description: "Mathematical foundations and categorical structures"

# ============================================================================
# OUTPUT SPECIFICATIONS
# ============================================================================

outputs:
  primary:
    - path: "build/impl/qi.v4.py.impl.md"
      description: "Python implementation specification (combines template + guide)"
      format: "markdown"
      required_sections:
        - "Base Component Implementation"
        - "Core Component Implementation"
        - "Application Component Implementation"
        - "Integration Examples"
        - "Performance Benchmarks"
        - "Type Safety Verification"
        - "Package Dependencies"
        - "Implementation Strategy"
        - "Package Integration Guide"
        - "Type System Usage"
        - "Performance Optimization Guide"
        - "Testing Strategy"
        - "Deployment Considerations"

  project_structure:
    base_path: "src/"
    components:
      - "base/ (Result, QiError)"
      - "core/ (Configuration, Logging, Cache)"
      - "http/ (HTTP client with circuit breaker)"
      - "document/ (Document generation with streaming)"
      - "clp/ (Command-line processing)"

# ============================================================================
# TRANSFORMATION PROCESS
# ============================================================================

transformation_process:
  
  step_1_pattern_analysis:
    description: "Analyze design patterns for Python implementation"
    actions:
      - "Map Result monad to Python Optional/Either pattern"
      - "Map Configuration monoid to Python dict merging"
      - "Map Logger effect to structured logging with context vars"
      - "Map Cache state to LRU implementation with asyncio"
      - "Map circuit breaker to async state machine"
      - "Map streaming to async generators with backpressure"
  
  step_2_package_integration:
    description: "Integrate researched Python packages"
    actions:
      - "Select packages matching mathematical properties"
      - "Create thin wrappers preserving abstractions"
      - "Implement missing functionality"
      - "Ensure version compatibility"
      - "Document integration points"
  
  step_3_type_system:
    description: "Apply Python type system effectively"
    actions:
      - "Use Generic[T] for parametric polymorphism"
      - "Apply Protocol for structural typing"
      - "Implement runtime type checks where needed"
      - "Document type constraints clearly"
      - "Set up mypy configuration"
  
  step_4_optimization:
    description: "Optimize within interpreted tier constraints"
    actions:
      - "Apply async/await for I/O-bound operations"
      - "Use __slots__ for memory optimization"
      - "Implement caching and memoization"
      - "Batch operations where possible"
      - "Profile and optimize hot paths"

# ============================================================================
# QUALITY ASSURANCE
# ============================================================================

quality_assurance:
  
  pattern_implementation:
    - "All design patterns correctly implemented"
    - "Mathematical laws preserved in Python code"
    - "Type safety maintained throughout"
    - "Performance within tier constraints"
  
  package_integration:
    - "All packages properly integrated"
    - "Version conflicts resolved"
    - "Abstractions maintained"
    - "Dependencies documented"
  
  code_quality:
    - "PEP 8 compliance"
    - "Documentation complete"
    - "Tests comprehensive"
    - "Examples runnable"

# ============================================================================
# SUCCESS CRITERIA
# ============================================================================

success_criteria:
  
  implementation_coverage:
    - "[ ] Result: 8/8 operations implemented"
    - "[ ] QiError: 6/6 operations + 8/8 categories"
    - "[ ] Configuration: 9/9 operations implemented"
    - "[ ] Logger: 7/7 operations implemented"
    - "[ ] Cache: 9/9 operations implemented"
    - "[ ] HTTP: 7/7 operations implemented"
    - "[ ] Document: 6/6 operations implemented"
    - "[ ] CLP: 5/5 operations implemented"
    - "[ ] Web Framework: 8/8 operations implemented"
    - "[ ] ASGI: 5/5 operations implemented"
    - "[ ] MCP: 6/6 operations implemented"
    - "[ ] Database: 5/5 operations implemented"
    - "[ ] AI Client: 5/5 operations implemented"
    - "[ ] Total: 99/99 operations implemented"
  
  quality_metrics:
    - "[ ] All mypy checks pass"
    - "[ ] All tests pass"
    - "[ ] Performance targets met"
    - "[ ] Documentation complete"
    - "[ ] Examples runnable"
    - "[ ] PEP 8 compliant"

# ============================================================================
# INTEGRATION POINTS
# ============================================================================

integration:
  
  upstream_dependencies:
    - "Stage 3: language-agnostic template must be complete"
    - "Stage 4: Python package research must be complete"
    - "Stage 2: mathematical contracts must be available"
    - "Methodology files: impl.py.prompt.md and common.md available"
  
  downstream_consumers:
    - "Verification processes will validate implementation"
    - "Documentation will reference implementation"
    - "Examples will use implementation"

# ============================================================================
# EXECUTION INSTRUCTIONS
# ============================================================================

execution:
  
  preparation:
    - "Verify design patterns are complete"
    - "Ensure package research is complete"
    - "Set up Python development environment"
  
  implementation:
    - "Follow impl.py.prompt.md methodology"
    - "Implement patterns in order of dependency"
    - "Maintain mathematical properties"
    - "Document as you implement"
  
  validation:
    - "Run mypy checks"
    - "Execute test suite"
    - "Verify performance targets"
    - "Check documentation coverage"
  
  output_generation:
    - "Generate implementation templates"
    - "Create implementation guide"
    - "Include all required sections"
    - "Add examples and benchmarks"

# ============================================================================
# VERIFICATION REPORT
# ============================================================================

verification_report:
  target_file: "stage5-python-verification-report.md"
  required_sections:
    - "Implementation Coverage Verification"
    - "Pattern Preservation Verification"
    - "Type Safety Verification"
    - "Performance Verification"
    - "Package Integration Verification"
    - "Success Criteria Compliance"
  
  format: |
    # Stage 5 Python Implementation Verification Report
    
    ## Implementation Coverage Verification
    [Verify all 99 operations implemented]
    
    ## Pattern Preservation Verification
    [Confirm design patterns correctly implemented]
    
    ## Type Safety Verification
    [Validate type system usage and mypy results]
    
    ## Performance Verification
    [Confirm performance within tier constraints]
    
    ## Package Integration Verification
    [Verify package integration and abstractions]
    
    ## Success Criteria Compliance
    [Complete checklist from impl.py.prompt.md] 